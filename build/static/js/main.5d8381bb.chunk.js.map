{"version":3,"sources":["Components/ProjectItem.js","Components/Project.js","Components/AddProject.js","Components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["ProjectItem","e","id","target","this","props","onDelete","project","style","completed","color","title","category","onClick","deleteProject","bind","React","Component","Project","projects","filterText","isCompleted","projectItems","map","toLowerCase","indexOf","key","className","AddProject","state","handleChange","handleSubmit","name","value","setState","uuid","v4","newProject","console","log","preventDefault","addProject","categoryOptions","categories","onSubmit","type","onChange","required","defaultProps","SearchBar","checked","onCompleted","onFilterText","placeholder","App","handleAddProject","handleFilterText","handleCompleted","index","findIndex","splice","push","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5d8381bb.chunk.js","sourcesContent":["import React from 'react';\n\nclass ProjectItem extends React.Component {\n  \n  deleteProject(e) {\n\tconst id = e.target.id;\n\tthis.props.onDelete(id);\n  }\n\n  render() {\n    const project = this.props.project;\n  \treturn (\t \n\t  <li>\n      <span style={project.completed === 'no'? {color: 'blue'}: {color: 'black' }} >\n        {this.props.project.title}: {this.props.project.category}\n      </span>           \n      <button onClick={this.deleteProject.bind(this)} id={this.props.project.id} >X</button>\n    </li>\n\n\t);\n  }\t\n}\n\nexport default ProjectItem;\n","import React from 'react';\nimport ProjectItem from './ProjectItem';\n\nclass Project extends React.Component {\n  deleteProject(id) {\n    this.props.onDelete(id);\n  }\n \n  render() {\n    let projects = this.props.projects\n    let filterText = this.props.filterText;\n    let isCompleted = this.props.isCompleted;    \n    let projectItems = projects.map(project => {\n      if(project.title.toLowerCase().indexOf(filterText) === -1) {\n        return null };\n      if(isCompleted && project.completed === 'no') { return null };     \n      return (\n        <ProjectItem key={project.id} project={project} onDelete={this.deleteProject.bind(this)} />\n      )\n    });\n    return (\n      <div className=\"projects\"> \n        <h3>Our projects</h3>  \n        <ol>\n          {projectItems}      \n        </ol>\n        <p>Project in blue is in progress</p>      \n      </div>\n    );\n  }  \t\n}\n\nexport default Project;\n\n","import React from 'react';\nimport uuid from 'uuid';\n\nclass AddProject extends React.Component {\n  constructor(props) {\n    super()\n    this.state = {\n        id: '',\n        title: '',\n        category: 'Web Design',\n        completed: 'no'  \n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    \n  }\n  static defaultProps = {\n    categories: ['Web Design', 'Web Development', 'Mobile Development']\n  }\n  \n  handleChange(e) {\n    let { name, value } = e.target;\n    this.setState({\n        id: uuid.v4(),\n        [name]: value,\n    });\n  }\n\n  handleSubmit(e) {\n    const newProject = this.state;\n    console.log(newProject);\n    e.preventDefault();\n    this.props.addProject(newProject);\n  }\n\n  render() { \n    let categoryOptions = this.props.categories.map(category => {\n      return <option key={category} value={category} >{category}</option>\n    });\n    \n    return (  \n      <div className='addproject'>\n        <h3>Add Projects</h3>\n        <form onSubmit={this.handleSubmit} >\n          <div>\n            <label className='addproject-label'>Title: </label>\n            <input \n              name='title' \n              type='text' \n              value={this.state.title}  \n              onChange={this.handleChange}\n              required />\n          </div>\n          <div>\n            <label className='addproject-label'>Category: </label>\n            <select \n              name='category'\n              value={this.state.category}\n              onChange={this.handleChange} >\n              {categoryOptions}\n            </select>\n          </div>\n          <div>\n            <label className='addproject-label'>Status: </label>\n            <select \n              name='completed'\n              value={this.state.completed}\n              onChange={this.handleChange} >\n              <option value='no'>In progress</option>\n              <option value='yes'>Completed</option>\n            </select>\n          </div>\n          <input type='submit' value='Submit' />\n        </form>\n      </div>\n    );  \n  }  \t\n\t  \n}\n\nexport default AddProject;\n","import React from 'react';\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n  \n  this.handleChange = this.handleChange.bind(this);\n  \n  };\n\nhandleChange(e) {\n  const { value, type, checked } = e.target;\n  type === 'checkbox' ? \n    this.props.onCompleted(checked): \n    this.props.onFilterText(value);  \n}\n\n  render() {\n    return (\n      <div className=\"container-searchBar\">\n        <input \n          type='text' \n          value={this.props.filterText}\n          onChange={this.handleChange}\n          placeholder='search...'  \n        /><br />\n        <div>\n          <input \n            type='checkbox'\n            name='isCompleted'\n            checked={this.props.isCompleted} \n            onChange={this.handleChange}  \n          />\n          <span>show completed projects only</span>\n        </div>\n      </div>\n    );  \n  }\n}\n\nexport default SearchBar;\n\n//app.js\n//  AddProject\n//  Project\n//    ProjectItem\n\n\n\n\n\n","import React from 'react';\nimport uuid from 'uuid';\nimport './App.css';\nimport Project from './Components/Project';\nimport AddProject from './Components/AddProject';\nimport SearchBar from './Components/SearchBar';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      projects: [],\n      filterText: \"\",\n      isCompleted: false\n    }\n    this.handleAddProject = this.handleAddProject.bind(this);\n    this.deleteProject = this.deleteProject.bind(this);\n    this.handleFilterText = this.handleFilterText.bind(this);\n    this.handleCompleted = this.handleCompleted.bind(this);\n  };\n\ncomponentDidMount() {\n  this.setState({projects: [\n    {\n      id: uuid.v4(),\n      title: 'Business website',\n      category: 'Web Design',\n      completed: 'no'  \n    },\n    { \n      id: uuid.v4(),\n      title: 'Social App',\n      category: 'Mobile Development',  \n      completed: 'yes'  \n    },\n    { \n      id: uuid.v4(),\n      title: 'Ecommerce Shopping Cart',\n      category: 'Web Development',  \n      completed: 'yes'  \n    }\n    ]\n  })\n}  \n\ndeleteProject(id) {\n  const projects = this.state.projects;\n  const index = projects.findIndex(project => project.id === id);\n  projects.splice(index, 1);\n  this.setState({projects: projects});  \n}\n\nhandleAddProject(project) {\n  let projects = this.state.projects;\n  projects.push(project);\n  this.setState({projects: projects});  \n}\n\nhandleFilterText(filterText) {\n  this.setState({filterText: filterText})\n}\n\nhandleCompleted(isCompleted) {\n  this.setState({isCompleted: isCompleted})\n}\n\nrender() {\n  return (\n    <div className=\"container-main\">\n      <h1>KOOL Web & App Development</h1>\n      <SearchBar \n        filterText={this.state.filterText}\n        isCompleted={this.state.isCompleted}\n        onFilterText={this.handleFilterText}\n        onCompleted={this.handleCompleted}   \n      />\n      <Project \n        projects={this.state.projects} \n        onDelete={this.deleteProject} \n        filterText={this.state.filterText}\n        isCompleted={this.state.isCompleted} \n      />\n      <AddProject addProject={this.handleAddProject} />\n    </div>\n  );  \n}\n}\n\nexport default App;\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}